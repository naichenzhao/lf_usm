target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
  #include <stdio.h>
=}

reactor ROS_Interface {
  input[6] current_pos: float
  input[6] sea_pos: float

  output[6] target_pos: float

  timer trigger_send(500 ms, 500 ms)
  timer trigger_read(0, 20 ms)

  // Data in format:      'p' + 6x[fp32] -> 25 bytes
  // Data out format:     'e' + 6x[fp32] -> 25 bytes
  preamble {=
    extern UART_HandleTypeDef huart2;
    DMA_HandleTypeDef hdma_usart2_rx;
    DMA_HandleTypeDef hdma_usart2_tx;

    // Setup Rx and Tx buffers
    static uint8_t rx_buffer[50];
    static uint8_t tx_buffer[50];

    int enc_data[6];
    int16_t joint_data[6];
    float scaled_joint_data[6];

    // We have an inFlight indicator if the DMA is currently sending data
    static volatile int inFlight = 0;

    static float get_target(uint8_t* data) {
      float count = data[0] + (data[1]<<8) + (data[2]<<16) + (data[3]<<24) + (data[4]<<32);
      return count;
    }

    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
      if (huart == &huart2) {
        inFlight = 0;
      }

    }
  =}

  reaction(startup) {=
    // Prep the send indicator
    tx_buffer[0] = 'e';
  =}

  reaction(current_pos) {=
    if (!inFlight) {
      enc_data[0] = (int)(current_pos[0]->value * 10000)/37;
      enc_data[1] = (int)(current_pos[1]->value * 10000)/20;
      enc_data[2] = (int)(current_pos[2]->value * 10000)/285;
      enc_data[3] = (int)(current_pos[3]->value * -10);
      enc_data[4] = (int)(current_pos[4]->value);
      enc_data[5] = (int)(current_pos[5]->value);
    }
  =}

  reaction(trigger_send) {=
    if (!inFlight) {
      inFlight = 1; // Indicate that we are currently sending data
      int num = sprintf(tx_buffer,"e%d,%d,%d,%d,%d,%d\r\n", enc_data[0], enc_data[1], enc_data[2], enc_data[3], enc_data[4], enc_data[5]);
      HAL_UART_Transmit_IT(&huart2, tx_buffer, num);
    }
  =}

  reaction(trigger_read) -> target_pos {=
    if (HAL_UART_Receive(&huart2, rx_buffer, 1, 0) == HAL_OK && (rx_buffer[0] == 'p')) {


      if (HAL_UART_Receive(&huart2, rx_buffer, 12, 100) == HAL_OK) {
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
        for (int i=0; i<6; i++) {
          joint_data[i] = rx_buffer[(i*2)+1]  + (rx_buffer[(i*2)]<<8);
        }

        scaled_joint_data[0] = ((float) joint_data[0] * 37)/10000;
        scaled_joint_data[1] = ((float) joint_data[1] * 20)/10000;
        scaled_joint_data[2] = ((float) joint_data[2] * -285)/10000;
        scaled_joint_data[3] = - ((((float) joint_data[3] * 180)/10000) - 90);
        scaled_joint_data[4] = ((float) joint_data[4]*100 * 2)/10000;
        scaled_joint_data[5] = ((float) joint_data[5]*100 * 2)/10000;

        for (int i=0; i<6; i++) {
          lf_set(target_pos[i], scaled_joint_data[i]);
        }
        printf("got: %d,%d,%d,%d,%d,%d\n", (int)scaled_joint_data[0], (int)scaled_joint_data[1], (int)scaled_joint_data[2], (int)scaled_joint_data[3], (int)scaled_joint_data[4], (int)scaled_joint_data[5]);
      }

    }
  =}
}
