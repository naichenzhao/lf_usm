target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor FFB_Controller(Ks: float = 2000, SLIM: float = 0.003, D_LIM: float = 0.002) {
  input current_pos: float
  input sea_pos: float
  input target_pos: float
  output out: float

  state fsm_state: int
  state last_sea: float = 0  // to help with state variables

  // The Force Feedback controller (FFB) works to set the force experienced by the SEA to zero
  // This is done by sensing the SEA displacement and if it is greater than
  // a certian threshold, we will move in a direction
  // TODO: Test this code
  reaction(target_pos, current_pos, sea_pos) -> out {=
    float UPPER_LIM = 0.01;
    float pid_out;

    float error_p = sea_pos->value;
    float sea_diff = (sea_pos->value - self->last_sea);
    self->last_sea = sea_pos->value;

    bool pos_flag = (error_p > UPPER_LIM || error_p < -UPPER_LIM);
    bool change_flag = (sea_diff > self->D_LIM || sea_diff < -self->D_LIM);
    // FSM for control state.
    // 0: We are in the idle state
    // 1: We are moving
    if(self->fsm_state) {
      pid_out = self->Ks * error_p;
      self->fsm_state = (error_p > self->SLIM || error_p < -self->SLIM);
    } else {
      pid_out = 0;
      self->fsm_state = pos_flag || change_flag;
    }

    pid_out = pid_out < -100? -100: pid_out;
    pid_out = pid_out > 100? 100: pid_out;

    // printf("error: %d, out: %d\r\n", (int)(error_p * 100), (int)pid_out);
    lf_set(out, pid_out);
  =}
}
