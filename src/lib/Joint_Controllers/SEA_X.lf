target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

import FFB_Controller from "FFB.lf"
import PID_Controller from "PID.lf"

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor SEA_ControllerX(
    Kp: float = 10,
    Ki: float = 5,
    Kd: float = -2,
    Ks: float = 1000,
    SLIM: float = 0.008,
    SEA_LIM: float = 0.1) {
  input current_pos: float
  input sea_pos: float
  input target_pos: float
  output out: float

  // State variable, 1 for pos, 0 for force
  // 0: For force feedback control
  // 1: For standard positional control
  // 2: For initial movement transience
  state fsm_state: int = 0
  state last_target: float = 0
  state last_sea: float = 0  // to help with state variables

  state last_out: float = 0  // to help with state variables

  state cycle_count: int = 0

  state print_data: bool = true

  force_control = new FFB_Controller(Ks=Ks, SLIM=SLIM)
  pos_control = new PID_Controller(Kp=Kp, Kd=Kd, Ki=Ki)

  current_pos -> force_control.current_pos
  sea_pos -> force_control.sea_pos
  target_pos -> force_control.target_pos

  current_pos -> pos_control.current_pos
  sea_pos -> pos_control.sea_pos
  target_pos -> pos_control.target_pos

  reaction(sea_pos, target_pos) {=
    float D_LIM = 0.014;      // Force difference limit
    float TRANS_CYCLES = 100;  // Number of cycles we stay in thetransient state


    float sea_diff = (sea_pos->value - self->last_sea);
    float sea_error = sea_pos->value;
    self->last_sea = sea_pos->value;

    bool pos_flag = (sea_error > self->SEA_LIM || sea_error < -self->SEA_LIM);
    bool change_flag = (sea_diff > D_LIM || sea_diff < -D_LIM);

    // printf("s %d\n\r", self->fsm_state);

    if (self->last_target != target_pos->value) {
      self->fsm_state = 2;
      self->cycle_count = 0;
    } else if(self->fsm_state == 1) {       // For normal PID movement
      if (change_flag) {
        if(self -> print_data) {
          printf("X_ch_f %d\n\r", (int)(sea_diff * 10000));
        }
        self->fsm_state = 0; // We got to FFB state
      } else if(pos_flag) {
        if(self -> print_data) {
          printf("X_pos_f %d\n\r", (int)(sea_error * 10000));
        }
        self->fsm_state = 0; // We got to FFB state
      }
    } else if(self->fsm_state == 2) {       // For initial movement transience
      self->cycle_count++;
      if (pos_flag) {
        if(self -> print_data) {
          printf("X_tr_pos: %d\n\r", (int)(sea_error * 1000));
        }
        self->fsm_state = 0; // We go to FFB state
      } else if(self->cycle_count >= TRANS_CYCLES) {
        self->fsm_state = 1; // We got to standard PID state
      }
    }
    self->last_target = target_pos->value;
  =}

  reaction(force_control.out, pos_control.out) -> out {=
    float RISE_CAP = 1;
    float FALL_CAP = 20;
    if (self->fsm_state) {

      float out_diff = pos_control.out->value - self->last_out;
      float out_val = pos_control.out->value;

      if (out_diff > RISE_CAP) {
        out_val = self->last_out + RISE_CAP;
      }
      if (out_diff < -FALL_CAP) {
        out_val = self->last_out - FALL_CAP;
      }
      lf_set(out, out_val);
      self->last_out = out_val;

    } else {
      lf_set(out, force_control.out->value);
      self->last_out = 0;
    }
  =}
}
