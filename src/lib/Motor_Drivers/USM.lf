target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor USM {
  input set_speed_2: float
  input set_speed_3: float
  input set_speed_4: float

  preamble {=
    TIM_HandleTypeDef htim2;
    TIM_HandleTypeDef htim3;

    static void MX_TIM2_Init(void) {
      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
      TIM_MasterConfigTypeDef sMasterConfig = {0};
      TIM_OC_InitTypeDef sConfigOC = {0};

      htim2.Instance = TIM2;
      htim2.Init.Prescaler = 0;
      htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
      htim2.Init.Period = 1000;
      htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
      htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
      if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
        Error_Handler();
      }
      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
      if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
      }
      if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
        Error_Handler();
      }
      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
      if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
        Error_Handler();
      }
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
      sConfigOC.Pulse = 0;
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
      if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
        Error_Handler();
      }
      if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
        Error_Handler();
      }
      if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
        Error_Handler();
      }
      HAL_TIM_MspPostInit(&htim2);
    }

    static void MX_TIM3_Init(void) {
      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
      TIM_MasterConfigTypeDef sMasterConfig = {0};
      TIM_OC_InitTypeDef sConfigOC = {0};

      htim3.Instance = TIM3;
      htim3.Init.Prescaler = 0;
      htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
      // htim3.Init.Period = 65535;
      htim3.Init.Period = 1000;
      htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
      htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
      if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
        Error_Handler();
      }
      sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
      if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
      }
      if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
        Error_Handler();
      }
      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
      if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
        Error_Handler();
      }
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
      sConfigOC.Pulse = 0;
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
      if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
        Error_Handler();
      }
      if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
        Error_Handler();
      }
      HAL_TIM_MspPostInit(&htim3);
    }

    static void USM_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOA_CLK_ENABLE();
      __HAL_RCC_GPIOB_CLK_ENABLE();

      // Name, Direction, Enable
      // USM_2, PA12, PA11
      // USM_3, PB0, PA4
      // USM_4, PB2, PB1

      /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

      /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

      GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    }
  =}

  reaction(startup) {=
    MX_TIM2_Init();
    MX_TIM3_Init();
    USM_GPIO_Init();

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // USM_2, PB10
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // USM_3, PB4
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // USM_4, PB5
  =}

  reaction(set_speed_2, set_speed_3, set_speed_4) {=
    // Set USM enable values


    // For some reason, setting the motor direction doesnt work unless we add a small delay in between
    //      Im not sure why but we need to figure out why this is happning
    //      TODO: Figure out why this is fucked up
    //      TODO; See if we can decrease the amount we delay by
    // HAL_Delay(1);
    // Update: It seems like moving the direction set above the enable pins resolves this issue
    //      Though I am still not sure why this is happening
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, set_speed_3->value >= 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, set_speed_4->value >= 0);

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  (set_speed_3->value > 0.01 || set_speed_3->value < -0.01) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)); // && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  (set_speed_4->value > 0.01 || set_speed_4->value < -0.01) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)); // && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);


    int p = 0;
    if(set_speed_3->value < 0) {
      p = (int)((1000 * -set_speed_3->value * 0.8)/100);
    } else {
      p = (int)((1000 * set_speed_3->value * 0.8)/100);
    }
    p = (p > 500)? 500: p;
    TIM3->CCR1 = p;

    if(set_speed_4->value < 0) {
      p = (int)((1000 * -set_speed_4->value * 0.65)/100);
    } else {
      p = (int)((1000 * set_speed_4->value * 0.65)/100);
    }
    p = (p > 420)? 420: p;
    TIM3->CCR2 = p;
  =}
}
