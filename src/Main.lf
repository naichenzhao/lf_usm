target C {
  single-threaded: true,
  platform: {
    name: "STM32",
    board: "F446RE"
  }
}

import QDEC from "lib/Encoder.lf"
import Home from "lib/Home.lf"
import Motor_Driver from "lib/Motor_Driver.lf"
// import ROS_Interface from "lib/ROS_Interface.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
=}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
    extern UART_HandleTypeDef huart2;


    // Target positions
    // X: [0] - [37]
    // Y: [0] - [21]
    // Z: [0] - [-285]
    // R: [-90] - [90]
    float target_pos[6] =   {0, 0, 0, 0, 0, 0};
    float target_speed[6] = {0, 0, 0, 0, 0, 0};
    bool target_sel[6] =    {0, 0, 0, 0, 0, 0};

    // We have 3 potential output LEDS:
    // - PA5 - Onboard LED
    // - PC14, PC15 - PCB LEDs
    static void MX_GPIO_Init(void) {
      GPIO_InitTypeDef GPIO_InitStruct = {0};
      __HAL_RCC_GPIOC_CLK_ENABLE();
      __HAL_RCC_GPIOA_CLK_ENABLE();

      /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

      /*Configure GPIO pins : PA14 PA15 */
      GPIO_InitStruct.Pin = GPIO_PIN_5;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

      /*Configure GPIO pins : PC14 PC15 */
      GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    }
  =}

  timer motor_update(5 ms, 10 ms)
  timer switch_motor(5 ms, 8000 ms)
  state count: int = 1

  qdec = new QDEC()            // FPGA-based QDEC Encoders
  motors = new Motor_Driver()  // Main Motor driver + controller
  home = new Home()            // Used to home the motors

  // ros_controller = new ROS_Interface()
  qdec.qdec_out -> motors.qdec_current
  qdec.sea_out -> motors.qdec_sea
  // ros_controller.target_pos -> motors.target_pos  // Reactor for updating motor target positions from manual targets

  // qdec.qdec_out -> ros_controller.current_pos
  // qdec.sea_out -> ros_controller.sea_pos

  reaction(startup) {=
    MX_GPIO_Init();
  =}

  // Used to update Motor target values
  // Reactor for updating motor target positions from manual targets
  reaction(motor_update) -> motors.target_pos {=
    for (int i=0; i<6; i++) {
      lf_set(motors.target_pos[i], target_pos[i]);  
    }
  =}
  // Initial homing state for when we want home all of the joints
  initial mode HOME {
    timer home_pulse(50 ms, 100 ms)

    qdec.qdec_out -> home.current_pos
    qdec.sea_out -> home.sea_pos
    reaction(home_pulse) -> qdec.reset_qdec, reset(RUN) {=
      // If all the speeds are set to zero, we assume we have corrctly homed
      bool all_homed = true;
      for(int i=0; i<6; i++) {
        all_homed = all_homed && (target_speed[i] == 0);
      }

      // If homed, we transition to the run state
      if (all_homed) {
        for(int i=0; i<6; i++) {
          target_pos[i] = 0;
        }
        lf_set(qdec.reset_qdec, true);
        lf_set_mode(RUN);
        printf("--- Finished Homing ---\r\n");
      }
    =}

    reaction(home.motor_speed) {=
      for(int i=0; i<6; i++) {
        target_speed[i] = home.motor_speed[i]->value;
      }
    =}

    reaction(motor_update) -> motors.target_sel, motors.target_speed {=
      for (int i=0; i<6; i++) {
        lf_set(motors.target_sel[i], 0);
        lf_set(motors.target_speed[i], target_speed[i]);
      }
    =}
  }

  // Run state for when the robot is in operation
  // vroom vroom
  mode RUN {
    reaction(switch_motor) -> motors.target_sel, motors.target_speed {=
      printf("switch state: %d\r\n", self->count);
      lf_set(motors.target_speed[2], 0);
      lf_set(motors.target_speed[3], 0);
      lf_set(motors.target_speed[4], 0);
      lf_set(motors.target_speed[5], 0);
      lf_set(motors.target_speed[1], 0);
      if (self->count == 0) {
        self->count = 1;
        // lf_set(motors.target_pos[0], 50);
        target_pos[0] = 0;
      } else {
        self->count = 0;
        // lf_set(motors.target_pos[0], 0);
        target_pos[0] = 4;
      }


      for (int i=1; i<6; i++) {
        lf_set(motors.target_sel[i], 0);
      }
      lf_set(motors.target_sel[0], 1);
    =}
  }
}
